{"ast":null,"code":"var _jsxFileName = \"/home/skynet/react-practise/crown-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { connect } from 'react-redux';\nimport { SignInContainer, ButtonsContainer, TitleContainer } from './sign-in.styles';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const [userCredentials, setuserCredentials] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      email,\n      password\n    } = userCredentials;\n    emailSignInStart(email, password);\n    this.setState({\n      email: '',\n      password: ''\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setuserCredentials({ ...userCredentials,\n      [name]: value\n    });\n    event.preventDefault();\n  };\n\n  return /*#__PURE__*/React.createElement(SignInContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TitleContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Sign In with email & password \"), /*#__PURE__*/React.createElement(\"form\", {\n    action: \"\",\n    method: \"post\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    type: \"email\",\n    id: \"email\",\n    name: \"email\",\n    value: email,\n    required: true,\n    label: \"Email\",\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    id: \"password\",\n    value: password,\n    required: true,\n    label: \"Password\",\n    handleChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"SIGN IN\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"Sign In With Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/skynet/react-practise/crown-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","googleSignInStart","emailSignInStart","FormInput","CustomButton","connect","SignInContainer","ButtonsContainer","TitleContainer","SignIn","userCredentials","setuserCredentials","email","password","handleSubmit","event","preventDefault","setState","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , {useState} from 'react';\nimport { googleSignInStart , emailSignInStart } from '../../redux/user/user.actions';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport {connect} from 'react-redux';\nimport {\n    SignInContainer,\n    ButtonsContainer,\n    TitleContainer\n    } from './sign-in.styles';  \n\nconst SignIn = ({emailSignInStart,googleSignInStart}) => {\n    const [userCredentials , setuserCredentials] = useState({email:'' , password:''});\n\n    const handleSubmit= async (event) =>{\n        event.preventDefault();\n\n        const {email , password} = userCredentials;\n        \n        \n        emailSignInStart(email ,password);\n        this.setState({email:'', password:''});\n    }\n\n    const handleChange = (event) => {\n        \n        const {value , name} = event.target;\n        setuserCredentials({...userCredentials,[name] : value})\n\n        event.preventDefault();\n    }\n    return (\n        <SignInContainer>\n            <TitleContainer>I already have an account</TitleContainer>\n            <span>Sign In with email & password </span>\n            \n            <form action=\"\" method=\"post\" onSubmit={handleSubmit}>\n                \n                <FormInput type=\"email\" id=\"email\" name=\"email\"  value={email} required label=\"Email\" handleChange={handleChange} />\n                <FormInput type=\"password\" name=\"password\" id=\"password\" value={password} required label=\"Password\" handleChange={handleChange}/>\n                <ButtonsContainer>\n                    <CustomButton type=\"submit\">SIGN IN</CustomButton>\n                    <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn >\n                        \n                        Sign In With Google\n                    </CustomButton>\n                </ButtonsContainer>\n            </form>\n            \n        </SignInContainer>\n        )\n    }\n\nconst mapDispatchToProps = dispatch =>({\n    googleSignInStart:() => dispatch(googleSignInStart()),\n    emailSignInStart:(email , password) => dispatch(emailSignInStart({email , password}))\n})\n\n\n    export default connect(null , mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}