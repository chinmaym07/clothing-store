{"ast":null,"code":"import { takeLatest, put, call, all } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  const {\n    user\n  } = yield auth.signInWithPopup(googleProvider);\n  yield getSnapshotFromUserAuth(user);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  const {\n    user\n  } = yield auth.signInWithEmailAndPassword(email, password);\n  yield getSnapshotFromUserAuth(user);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/skynet/react-practise/crown-clothing/src/redux/user/user.saga.js"],"names":["takeLatest","put","call","all","userActionTypes","auth","googleProvider","createUserProfileDocument","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAKA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EACP;AACE,MAAG;AACD,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACK,yBAAD,EAA6BI,QAA7B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AAEA,UAAMb,GAAG,CAACO,aAAa,CAAC;AAACO,MAAAA,EAAE,EAACF,YAAY,CAACE,EAAjB;AAAoB,SAAGF,YAAY,CAACG,IAAb;AAAvB,KAAD,CAAd,CAAT;AACD,GALD,CAMC,OAAOC,KAAP,EAAc;AACb,UAAMhB,GAAG,CAACQ,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF;AAGD,OAAO,UAAUC,gBAAV,GAA6B;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB;AACA,QAAMI,uBAAuB,CAACS,IAAD,CAA7B;AACH;AACD,OAAO,UAAUE,mBAAV,GAAgC;AACrC,QAAMrB,UAAU,CAACI,eAAe,CAACkB,oBAAjB,EAAuCJ,gBAAvC,CAAhB;AACD;AAKD,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAASC,IAAAA;AAAT;AAAT,CAA1B,EAAwD;AACzD,QAAM;AAAEP,IAAAA;AAAF,MAAU,MAAMd,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAwCC,QAAxC,CAAtB;AACA,QAAMhB,uBAAuB,CAACS,IAAD,CAA7B;AACL;AACD,OAAO,UAAUS,kBAAV,GAA+B;AACpC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAsCN,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUO,SAAV,GACP;AACI,QAAM3B,GAAG,CAAC,CAACD,IAAI,CAACmB,mBAAD,CAAL,EAA2BnB,IAAI,CAAC0B,kBAAD,CAA/B,CAAD,CAAT;AACH","sourcesContent":["import { takeLatest, put, call,all } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nexport function* getSnapshotFromUserAuth(userAuth)\n{\n  try{\n    const userRef = yield call(createUserProfileDocument , userAuth);\n    const userSnapshot = yield userRef.get();\n\n    yield put(signInSuccess({id:userSnapshot.id,...userSnapshot.data()}));\n  }\n   catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n\nexport function* signInWithGoogle() {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n\n\n\nexport function* signInWithEmail({payload:{email , password}}) {\n      const { user }= yield auth.signInWithEmailAndPassword(email , password);\n      yield getSnapshotFromUserAuth(user);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* userSagas()\n{\n    yield all([call(onGoogleSignInStart),call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}