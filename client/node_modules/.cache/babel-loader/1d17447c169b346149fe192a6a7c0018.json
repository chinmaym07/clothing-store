{"ast":null,"code":"import _regeneratorRuntime from\"/home/skynet/react-practise/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/skynet/react-practise/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/skynet/react-practise/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import firebase from'firebase/app';import'firebase/firestore';import'firebase/auth';var config={apiKey:\"AIzaSyBXQCC-miBfF27YuW48XIggDchuTRbF8Nw\",authDomain:\"crown-db-ed4b7.firebaseapp.com\",databaseURL:\"https://crown-db-ed4b7.firebaseio.com\",projectId:\"crown-db-ed4b7\",storageBucket:\"crown-db-ed4b7.appspot.com\",messagingSenderId:\"304665701144\",appId:\"1:304665701144:web:2e21e57862d2e8f3210c6d\",measurementId:\"G-H1GNY53501\"};export var createUserProfileDocument=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userAuth,additonalData){var userRef,snapShot,email,displayName,createdAt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(userAuth){_context.next=2;break;}return _context.abrupt(\"return\");case 2:userRef=firestore.doc(\"users/\".concat(userAuth.uid));_context.next=5;return userRef.get();case 5:snapShot=_context.sent;if(snapShot.exists){_context.next=18;break;}email=userAuth.email;displayName=additonalData.displayName;createdAt=new Date();_context.prev=10;_context.next=13;return userRef.set(_objectSpread({displayName:displayName,email:email,createdAt:createdAt},additonalData));case 13:_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](10);console.log('error creating user ',_context.t0.message());case 18:return _context.abrupt(\"return\",userRef);case 19:case\"end\":return _context.stop();}}},_callee,null,[[10,15]]);}));return function createUserProfileDocument(_x,_x2){return _ref.apply(this,arguments);};}();export var addCollectionAndDocuments=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(collectionKey,objectsToAdd){var collectionRef,documentRef,collectionSnapShot,batch;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:collectionRef=firestore.collection(collectionKey);documentRef=firestore.collection(collectionKey);_context2.next=4;return collectionRef.get();case 4:collectionSnapShot=_context2.sent;batch=firestore.batch();objectsToAdd.forEach(function(obj){var newDocRef=collectionRef.doc();batch.set(newDocRef,obj);});_context2.next=9;return batch.commit();case 9:return _context2.abrupt(\"return\",_context2.sent);case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function addCollectionAndDocuments(_x3,_x4){return _ref2.apply(this,arguments);};}();export var convertCollectionsSnapshotToMap=function convertCollectionsSnapshotToMap(collections){var transformedCollection=collections.docs.map(function(doc){var _doc$data=doc.data(),title=_doc$data.title,items=_doc$data.items;return{id:doc.id,routeName:encodeURI(title.toLowerCase()),title:title,items:items};});return transformedCollection.reduce(function(accumulator,collection){accumulator[collection.title.toLowerCase()]=collection;return accumulator;},{});};firebase.initializeApp(config);export var getCurrentUser=function getCurrentUser(){return new Promise(function(resolve,reject){var unsubscribe=auth.onAuthStateChanged(function(userAuth){unsubscribe();resolve(userAuth);},reject);});};export var auth=firebase.auth();export var firestore=firebase.firestore();export var googleProvider=new firebase.auth.GoogleAuthProvider();googleProvider.setCustomParameters({prompt:'select_account'});export default firebase;","map":{"version":3,"sources":["/home/skynet/react-practise/crown-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additonalData","userRef","firestore","doc","uid","get","snapShot","exists","email","displayName","createdAt","Date","set","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","documentRef","collectionSnapShot","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","id","routeName","encodeURI","toLowerCase","reduce","accumulator","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst config = {\n    apiKey: \"AIzaSyBXQCC-miBfF27YuW48XIggDchuTRbF8Nw\",\n    authDomain: \"crown-db-ed4b7.firebaseapp.com\",\n    databaseURL: \"https://crown-db-ed4b7.firebaseio.com\",\n    projectId: \"crown-db-ed4b7\",\n    storageBucket: \"crown-db-ed4b7.appspot.com\",\n    messagingSenderId: \"304665701144\",\n    appId: \"1:304665701144:web:2e21e57862d2e8f3210c6d\",\n    measurementId: \"G-H1GNY53501\"\n\n};\n\nexport const createUserProfileDocument = async(userAuth , additonalData)=> {\n    if(!userAuth) return;\n    \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n    \n    if(!snapShot.exists)\n    {\n        const {email} = userAuth;\n        const {displayName } = additonalData;\n        const createdAt = new Date();\n\n        try{\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additonalData\n            })\n        }catch(error)\n        {\n            console.log('error creating user ',error.message());\n        }\n        \n    }\n    return userRef;\n};\n\n\nexport const addCollectionAndDocuments = async(collectionKey , objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    const documentRef = firestore.collection(collectionKey);\n    const collectionSnapShot = await collectionRef.get();\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc();\n        batch.set(newDocRef,obj);\n    });\n    return await batch.commit();\n}\n\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedCollection = collections.docs.map(doc => {\n        const {title , items} = doc.data();\n        \n        return {\n            id:doc.id,\n            routeName:encodeURI(title.toLowerCase()),\n            title,\n            items\n        }\n    });\n    return transformedCollection.reduce((accumulator , collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;   \n    return accumulator;\n    },{});\n} \n\nfirebase.initializeApp(config);\n\nexport const getCurrentUser = ()=> {\n    return new Promise((resolve,reject) =>{\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\n            unsubscribe();\n            resolve(userAuth);\n        },reject)\n    })\n}\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({prompt:'select_account'});\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}